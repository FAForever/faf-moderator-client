import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

compileJava() {
    options.compilerArgs << "-Amapstruct.defaultComponentModel=jsr330"
}

project.ext.javafxPlatform = "${javafxPlatform}"

if (javafxPlatform == "unspecified") {
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            project.ext.javafxPlatform = "linux"
            break
        case OperatingSystem.MAC_OS:
            project.ext.javafxPlatform = "mac"
            break
        case OperatingSystem.WINDOWS:
            project.ext.javafxPlatform = "win"
            break
    }
}

println "Platform is: ${javafxPlatform}"

dependencies {
    annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:2.4.3"))
    implementation(platform("org.springframework.boot:spring-boot-dependencies:2.4.3"))

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    implementation 'org.projectlombok:lombok'
    implementation 'org.jetbrains:annotations:13.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.4.2'
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.github.jasminb:jsonapi-converter:0.10'
    implementation 'com.github.FAForever.faf-java-commons:faf-commons-data:f46290d70a3f2c56b901c954d576fa2e4660e2ac'
    implementation 'com.github.FAForever.faf-java-commons:faf-commons-api:f46290d70a3f2c56b901c954d576fa2e4660e2ac'
    implementation 'com.github.micheljung:nocatch:1.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.11'
    implementation 'com.github.rutledgepaulv:q-builders:1.6'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    implementation "org.openjfx:javafx-base:${javafxVersion}:${javafxPlatform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${javafxPlatform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${javafxPlatform}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}:${javafxPlatform}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//javafx {
//    version = "11"
//    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
//    /**
//     * https://github.com/openjfx/javafx-gradle-plugin
//     * JavaFX modules require native binaries for each platform. The plugin only includes binaries for the platform
//     * running the build. By declaring the dependency configuration compileOnly, the native binaries will not be
//     * included. You will need to provide those separately during deployment for each target platform.
//     */
//    configuration = 'compileOnly'
//}

mainClassName = 'com.faforever.moderatorclient.Launcher'

group = 'com.faforever'
description = 'faf-moderator-client'
sourceCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// This fixes the "line too long" error when running the .bat with windows CLI
tasks.withType(CreateStartScripts).each { task ->
    task.doLast {
        String text = task.windowsScript.text
        // Replaces the per file classpath (which are all jars in "lib") with a wildcard on lib
        text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
        task.windowsScript.write text
    }
}

distZip {
    doLast {
        file("$destinationDir/$archiveName").renameTo("$destinationDir/$baseName-$version-${javafxPlatform}.zip")
    }
}
